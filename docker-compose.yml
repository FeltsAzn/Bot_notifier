version: "2"

services:
  nginx:
    build: ./webserver/nginx
    image: tim/nginx-proxy
    env_file:
      - ./webserver/config.env
    volumes:
      - nginx_conf:/etc/nginx/sites
      - webserver/letsencrypt_certs:/etc/letsencrypt
      - webserver/certbot_acme_challenge:/var/www/certbot
      - ./webserver/vhosts:/etc/nginx/vhosts
      - ./webserver/html:/var/www/html
    ports:
      - "443:443"
    restart: unless-stopped

  certbot:
    build: ./webserver/certbot
    image: tim/certbot
    env_file:
      - ./webserver/config.env
    volumes:
      - letsencrypt_certs:/etc/letsencrypt
      - certbot_acme_challenge:/var/www/certbot

  cron:
    build: ./webserver/cron
    image: tim/cron
    environment:
      COMPOSE_PROJECT_NAME: "${COMPOSE_PROJECT_NAME}"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./:/workdir:ro
    restart: unless-stopped

  exchanges-data:
    image: exchanges-data
    container_name: exchanges_data
    build:
      context: ~/Crypto_Bot/Crypto_bot_API/
      dockerfile: dockerfile_exchanges
    restart: unless-stopped

  text-generator:
    image: text-generator
    container_name: text_creator
    build:
      context: ~/Crypto_Bot/Content_for_bot/
      dockerfile: dockerfile_text
    restart: unless-stopped

  telegram_bot:
    image: bot
    container_name: bot_app
    ports:
      - ${BOT_PORT}:${BOT_PORT}
    build:
      context: .
      dockerfile: dockerfile_bot
    depends_on:
      - text-generator
      - exchanges-data
      - redis
    restart: unless-stopped

  redis:
    image: redis:latest
    container_name: redis_server
    command: ["redis-server", "--save", "3600", "1000", "--loglevel", "warning", "--requirepass", "${REDIS_PASS}"]
    volumes:
      - cache:/data
    restart: unless-stopped
    env_file:
      - .env
#  mongodb:
#    image: mongo
#    container_name: mongodb

volumes:
  cache:
    driver: local
    external: true
  nginx_conf:
    external: true
  letsencrypt_certs:
    external: true
  certbot_acme_challenge:

